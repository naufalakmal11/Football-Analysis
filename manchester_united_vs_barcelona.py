# -*- coding: utf-8 -*-
"""Manchester United vs Barcelona

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UztDxjXHyWcM9oz7Ia4JACeJbvNL1nX4
"""

pip install mplsoccer

!pip install -U matplotlib

import numpy as np
import pandas as pd
from matplotlib import cm
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
from matplotlib.colors import ListedColormap
import matplotlib.patheffects as path_effects
import matplotlib.patches as mpatches
import matplotlib.image as mpimg
from mplsoccer import VerticalPitch, Pitch
from mplsoccer.cm import create_transparent_cmap
from mplsoccer.utils import FontManager

font_1 = FontManager(('https://github.com/dharmatype/Bebas-Neue/blob/master/fonts/BebasNeue(2014)ByFontFabric/'
                        'BebasNeue-Bold.ttf?raw=true'))
font_2 = FontManager(('https://github.com/EverRest/EvSe/blob/master/fonts/AlternateGothic2/'
                        'alternate-gothic-no2-bt.ttf?raw=true'))

df = pd.read_csv("/content/drive/MyDrive/World Cup Project/Europe_Europa-League_2022-2023_Manchester United_vs_Barcelona.csv", sep="|", encoding="iso-8859-1")

df

df[['minute', 'second', 'h_a', 'x', 'y', 'type', 'outcomeType', 'playerName', 'endX', 'endY', 'Setpiece', 'xT', 'team', 'country', 'competitiom', 'season']] = df["minute,second,h_a,x,y,type,outcomeType,playerName,endX,endY,Setpiece,xT,team,country,competition,season"].apply(lambda x: pd.Series(str(x).split(",")))

df

del df['minute,second,h_a,x,y,type,outcomeType,playerName,endX,endY,Setpiece,xT,team,country,competition,season']
df.head()

df['x'] = df['x'].astype(float)

df['y'] = df['y'].astype(float)



"""#Seleksi event team home dan away"""

#Set Variable
home_team = "Manchester United"
away_team = "Barcelona"

#DataFrame Home Team
df_home = df[(df["team"] == home_team)]
df_home.head()

df_home['x'] = (df_home['x'] - 100) * (-1)

df_home['y'] = (df_home['y'] - 100) * (-1)

#DataFrame Away Team
df_away = df[(df["team"] == away_team)]
df_away.head()

"""#Seleksi hasil outcome

cek tipe kejadian / event
"""

cek = df.groupby(['type']).count()
cek

"""Untuk membuat shot map yang akan diambil adalah goal, saved shot, dan missed shot"""

# Memisahkan Jenis Shots berdasarkan Tim
# Seleksi Tendangan yang menghasilkan Goal
df_home_goal = df_home[(df_home["type"] == "Goal")] 
df_away_goal = df_away[(df_away["type"] == "Goal")]

df_home_goal

df_away_goal

df_away_goal.info()

# Seleksi Tendangan yang diselamatkan oleh Kiper
df_home_saved = df_home[(df_home["type"] == "SavedShot")] 
df_away_saved = df_away[(df_away["type"] == "SavedShot")]

df_home_saved

df_away_saved

# Seleksi Tendangan yang Melenceng
df_home_miss = df_home[(df_home["type"] == "MissedShots")] 
df_away_miss = df_away[(df_away["type"] == "MissedShots")]

df_home_miss

df_away_miss

"""#Visualisasi Shot Map"""

home_color = '#000000'
away_color = '#036933'

#Set Warna Color Map
cmap_home = create_transparent_cmap(color= home_color,n_segments=100,alpha_start=0.2,alpha_end=0.8)
cmap_away = create_transparent_cmap(color= away_color,n_segments=100,alpha_start=0.2,alpha_end=0.8)

#List Posisi Goal 
x = df_home_goal[df_home_goal['type']=='Goal']['x'].tolist()
x1 = df_away_goal[df_away_goal['type']=='Goal']['x'].tolist()
y = df_home_goal[df_home_goal['type']=='Goal']['y'].tolist()
y1 = df_away_goal[df_away_goal['type']=='Goal']['y'].tolist()

# Annotation text nama pencetak gol
text_home = df_home_goal[df_home_goal['type']=='Goal']['playerName'].tolist()
text_away = df_away_goal[df_away_goal['type']=='Goal']['playerName'].tolist()

# Func Count untuk masing-masih tipe shoot
# Home
cnt_goal_home = len(df_home_goal)
cnt_saved_home = len(df_home_saved)
cnt_missed_home = len(df_home_miss)
# Away
cnt_goal_away = len(df_away_goal)
cnt_saved_away = len(df_away_saved)
cnt_missed_away = len(df_away_miss)

pitch = Pitch(pitch_type = 'wyscout', pitch_color='#fefefe', line_color='#000000', linewidth=1, goal_type = 'box')
fig,ax = pitch.draw(figsize = (16,9))
fig.set_facecolor('#000000')

#Menampilkan posisi tendangan yang menghasilkan Saved Shot
sc1 = plt.scatter(df_home_saved['x'],df_home_saved['y'], 
            cmap = cmap_home,
            edgecolor = 'black',
            marker = 'D')
sc2 = plt.scatter(df_away_saved['x'],df_away_saved['y'], 
            cmap = cmap_away,
            edgecolor = 'black',
            marker = 'D')

#Menampilkan posisi tendangan yang menghasilkan Miss Shot
sc5 = plt.scatter(df_home_miss['x'],df_home_miss['y'], 
            cmap = cmap_home,
            edgecolor = 'black',
            marker = 'X')

sc6 = plt.scatter(df_away_miss['x'],df_away_miss['y'], 
            cmap = cmap_away,
            edgecolor = 'black',
            marker = 'X')

#Menampilkan posisi tendangan yang menghasilkan Goal
sc7 = plt.scatter(df_home_goal['x'],df_home_goal['y'], 
            c = home_color,
            edgecolor = 'black',
            marker = '*')

sc8 = plt.scatter(df_away_goal['x'],df_away_goal['y'], 
            c = away_color,
            edgecolor = 'black',
            marker = '*')

#Text Tambahan
ax.text(x=50, y=7, s='Manchester United v Barcelona',  
        size=25, fontproperties=font_1.prop, color='white', backgroundcolor = '#000000' , va='center', ha='center')

ax.text(x=50, y=15, s='{}       Goal       {}'.format(cnt_goal_home,cnt_goal_away), size=18,
              fontproperties=font_2.prop, color='white', backgroundcolor = '#000000' ,
              va='center', ha='center')

ax.text(x=50, y=20, s='{}      Saved      {}'.format(cnt_saved_home,cnt_saved_away), size=18,
              fontproperties=font_2.prop, color='white', backgroundcolor = '#000000' ,
              va='center', ha='center')

ax.text(x=50, y=25, s='{}      Missed     {}'.format(cnt_missed_home,cnt_missed_away), size=18,
              fontproperties=font_2.prop, color='white', backgroundcolor = '#000000' ,
              va='center', ha='center')

ax.text(x=50, y=105, s='Data Visualization by Naufal Akmal',
        size=18, fontproperties=font_2.prop, color='white', backgroundcolor = '#000000' ,
              va='center', ha='center')

# Legends
goal = Line2D([0], [0], marker='*', markersize=np.sqrt(30), color='black', linestyle='None')
saved = Line2D([0], [0], marker='D', markersize=np.sqrt(30), color='black', linestyle='None')
missed = Line2D([0], [0], marker='X', markersize=np.sqrt(30), color='black', linestyle='None')

plt.legend([goal, saved, missed], ['Goal', 'Saved', "Missed"], loc="lower right", 
           markerscale=1.5, scatterpoints=1, fontsize=10, facecolor = '#fefefe', edgecolor = '#000000')

